[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
depends = 'Shougo/neosnippet.vim'
hook_add = '''
  source ~/.config/nvim/plugins/coc.nvim
'''

[[plugins]]
repo = 'tpope/vim-endwise'

# [[plugins]]
# repo = 'Townk/vim-autoclose'


[[plugins]]
repo = 'joshdick/onedark.vim'


[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  source ~/.config/nvim/plugins/gitgutter.vim
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  source ~/.config/nvim/plugins/fugitive.vim
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''

  " 水平に分割する
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split'  : ':rightbelow 8sp',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ }

  let g:quickrun_config.cpp = {
  \   'command': 'g++',
  \   'cmdopt': '-std=c++11'
  \ }

  " \r でquickfixを閉じて、保存してからquickrunを実行する。
  let g:quickrun_no_default_key_mappings = 1
  nnoremap \q :cclose<CR>:write<CR>:QuickRun -mode n<CR>
  xnoremap \q :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

  " quickrun.vim が実行していない場合には <C-c> を呼び出す
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>" 
  nnoremap <silent> <C-q> :QuickRun<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = "vim-scripts/DoxygenToolkit.vim"

[[plugins]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "rhysd/vim-clang-format"
hook_add = '''
  " autocmd FileType c,cpp,objc ClangFormatAutoEnable
  " autocmd FileType c,cpp,objc map <buffer><Leader>f <Plug>(operator-clang-format)
   " autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>

'''


# status bar color settings 
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ],
      \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
      \ },
      \ }
'''

# lightline extension for ale
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
'''

# syntax linter 
[[plugins]]
repo = 'w0rp/ale'
hook_source = '''
  let g:ale_disable_lsp = 1
'''
hook_add = '''
    " シンボルカラムを表示したままにする
    let g:ale_sign_column_always = 1
    " 保存時に整形してくれる
    let g:ale_fix_on_save = 1
    " 補完してくれる
    " let g:ale_completion_enabled = 1
    " エラー行に表示するマーク
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
    " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_linters = {
       \   'c' : ['clangd'],
       \   'cpp' : ['clangd'],
       \   'python' : ['flake8'],
     \}
'''

[[plugins]]
repo = 'taketwo/vim-ros'
hook_add = '''
  autocmd BufRead,BufNewFile *.launch setfiletype roslaunch.xml
'''

[[plugins]]
repo = 'wordijp/NeoDebug'

[[plugins]]
repo = 'google/yapf'
hook_add = '''
'''

[[plugins]]
repo = 'bennyyip/vim-yapf'
depends = ['google/yapf']
hook_add = '''
  " autocmd FileType python YapfAutoEnable
  autocmd FileType python setlocal equalprg=yapf
'''

[[plugins]]
repo = 'heavenshell/vim-pydocstring' 

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
 
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  " ファイル一覧を出すときにプレビュー表示
  command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  command! -bang -nargs=* Ag
        \ call fzf#vim#ag(<q-args>,
        \                 <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
        \                         : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%', '?'),
        \                 <bang>0)

  nnoremap <Leader>fm :History<CR>


  "gnnoremap <Leader>f :Files<CR>
  if executable('rg')
    nnoremap <Leader>g :Rg<CR>
  elseif executable('ag') 
    nnoremap <Leader>g :Ag<CR>
  endif
'''

# [[plugins]]
# repo = 'pbogut/fzf-mru.vim'
# hook_add = '''
#   " nnoremap <Leader>b :FZFMru<CR>
# '''

[[plugins]]
repo = 'voldikss/vim-floaterm'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
'''

# [[plugins]]
# repo = 'Yggdroot/LeaderF'
# build = 'bash install.sh'
# 
# hook_add = '''
# " let g:Lf_HideHelp = 1
# let g:Lf_UseCache = 1
# " let g:Lf_UseVersionControlTool = 0
# let g:Lf_IgnoreCurrentBufferName = 1
# let g:Lf_ShowDevIcons = 0
# " --- popup mode
# let g:Lf_WindowPosition = 'popup'
# let g:Lf_PreviewInPopup = 1
# let g:Lf_StlSeparator = { 'left': "", 'right': "", 'font': "" }
# let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
# 
# let g:Lf_ShortcutF = "<leader>ff"
# noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
# noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
# noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
# 
# '''

# [[plugins]]
# repo = 'kana/vim-textobj-user'
# 
# [[plugins]]
# repo = 'tkhren/vim-textobj-numeral'
# depends = ['kana/vim-textobj-user']

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
  let g:translator_target_lang = 'ja'
  let g:translator_default_engines = ['google']
'''


[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_folding_level = 0
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_auto_insert_bullets = 1
" let g:vim_markdown_conceal = 1
let g:vim_markdown_override_foldtext = 0

" substitute 'syntax' character to space
" set conceallevel=1
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  " if has('conceal')
  "   set conceallevel=2 concealcursor=niv
  " endif
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory='~/.nvim/snippets'
'''
# on_i  = 1
on_event = 'InsertEnter'
# on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
