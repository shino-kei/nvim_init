[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'


[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  colorscheme onedark
'''

[[plugins]]
repo = 'w0rp/ale'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  source ~/.config/nvim/plugins/gitgutter.vim
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  source ~/.config/nvim/plugins/fugitive.vim
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [denite] <Nop>
  nmap <Leader>d [denite]
  source ~/.config/nvim/plugins/denite.vim
'''
hook_post_source = '''
  call denite#custom#option('default', 'prompt', '>')
  call denite#custom#option('_', 'highlight_matched_range', 'None')
  call denite#custom#option('_', 'highlight_matched_char', 'None')

  " denite/insert モードのときは，C- で移動できるようにする
  call denite#custom#map('insert', "<Tab>", '<denite:move_to_next_line>')
  call denite#custom#map('insert', "<S-Tab>", '<denite:move_to_previous_line>')

  " ノーマルモードで起動、jjでノーマルへ
  call denite#custom#option('default', {'mode': 'normal'})
  call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>')


  " tabopen や vsplit のキーバインドを割り当て
  " call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
  " call denite#custom#map('insert', "<C-s>", '<denite:do_action:vsplit>')
  " call denite#custom#map('normal', "s", '<denite:do_action:vsplit>')

  " grepでagを使用するように設定
  " call denite#custom#var('grep', 'command', ['pt', '--follow', '--nogroup', '--nocolor', '--hidden'])
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
  call denite#custom#var('grep', 'recursive_opts', [])

  " カレントディレクトリ内の検索もagを使用する
  call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  source ~/.config/nvim/plugins/anzu.vim
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = ['bash install.sh']
depends = ['deoplete.nvim']
hook_add = '''
    let s:node = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME
    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd'],
        \ 'cpp': ['clangd'],
    \ }
    " not stop completion $ & /
    let g:LanguageClient_loadSettings = 1

    set hidden
    set signcolumn=yes
    " let g:LanguageClient_hoverPreview = "Never"
    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''

  " 水平に分割する
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split'  : ':rightbelow 8sp',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ }

  let g:quickrun_config.cpp = {
  \   'command': 'g++',
  \   'cmdopt': '-std=c++11'
  \ }

  " \r でquickfixを閉じて、保存してからquickrunを実行する。
  let g:quickrun_no_default_key_mappings = 1
  nnoremap \q :cclose<CR>:write<CR>:QuickRun -mode n<CR>
  xnoremap \q :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

  " quickrun.vim が実行していない場合には <C-c> を呼び出す
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>" 
  nnoremap <silent> <C-q> :QuickRun<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp']
depends = ['deoplete.nvim']

# syntax linter 
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    " シンボルカラムを表示したままにする
    let g:ale_sign_column_always = 1
    " 保存時に整形してくれる
    let g:ale_fix_on_save = 1
    " 補完してくれる
    let g:ale_completion_enabled = 1
    " エラー行に表示するマーク
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
    " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_linters = {
        \   'c' : ['clangd'],
        \   'cpp' : ['clangd']
    \}
'''

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add =  '''
  let g:rooter_patterns = ['CMakeLists.txt', '.git/']
'''

[[plugins]]
repo = "vim-scripts/DoxygenToolkit.vim"

[[plugins]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "rhysd/vim-clang-format"
hook_add = '''
  autocmd FileType c,cpp,objc ClangFormatAutoEnable
  autocmd FileType c,cpp,objc map <buffer><Leader>f <Plug>(operator-clang-format)
   " autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>

'''

# clipboard plugin
[[plugins]]
repo = 'christoomey/vim-system-copy'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# status bar color settings 
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ }
'''

[[plugins]]
repo = 'taketwo/vim-ros'
