[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
" if has('nvim')
"   inoremap <silent><expr> <c-space> coc#refresh()
" else
"   inoremap <silent><expr> <c-@> coc#refresh()
" endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

let g:coc_global_extensions = ['coc-clangd', 'coc-python', 'coc-cmake', 'coc-neosnippet', 'coc-sh', 'coc-markdownlint']

autocmd BufWritePost *.md CocCommand markdownlint.fixAll
'''


[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'


[[plugins]]
repo = 'joshdick/onedark.vim'


[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  source ~/.config/nvim/plugins/gitgutter.vim
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  source ~/.config/nvim/plugins/fugitive.vim
'''

# [[plugins]]
# repo = 'Shougo/denite.nvim'
# hook_add = '''
#   nnoremap [denite] <Nop>
#   nmap <Leader>d [denite]
#   source ~/.config/nvim/plugins/denite.vim
# '''
# hook_post_source = '''
#   call denite#custom#option('default', 'prompt', '>')
#   call denite#custom#option('_', 'highlight_matched_range', 'None')
#   call denite#custom#option('_', 'highlight_matched_char', 'None')
#
#   " denite/insert モードのときは，C- で移動できるようにする
#   " call denite#custom#map('insert', "<Tab>", '<denite:move_to_next_line>')
#   " call denite#custom#map('insert', "<S-Tab>", '<denite:move_to_previous_line>')
#
#   " ノーマルモードで起動、jjでノーマルへ
#   call denite#custom#option('default', {'mode': 'normal'})
#   call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>')
#
#
#   " tabopen や vsplit のキーバインドを割り当て
#   " call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
#   " call denite#custom#map('insert', "<C-s>", '<denite:do_action:vsplit>')
#   " call denite#custom#map('normal', "s", '<denite:do_action:vsplit>')
#
#   " grepでagを使用するように設定
#   " call denite#custom#var('grep', 'command', ['pt', '--follow', '--nogroup', '--nocolor', '--hidden'])
#   call denite#custom#var('grep', 'command', ['ag'])
#   call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
#   call denite#custom#var('grep', 'recursive_opts', [])
#
#   call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
#
# '''

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# build = 'bash install.sh'
# hook_add = '''
#     let s:node = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME
#     let g:LanguageClient_serverCommands = {
#        \ 'c': ['clangd'],
#        \ 'cpp': ['clangd'],
#        \ 'python': ['pyls'],
#    \ }
#     let g:LanguageClient_rootMarkers = {                                      
#           \ 'cpp': ['compile_commands.json', 'compile_flags.txt']                                          
#           \ }  
#
#     " not stop completion $ & /
#     let g:LanguageClient_loadSettings = 1
#
#     " stop linter
#     let g:LanguageClient_diagnosticsEnable = 0
#
#     set hidden
#     set signcolumn=yes
#     " let g:LanguageClient_hoverPreview = "Never"
#     nnoremap <F5> :call LanguageClient_contextMenu()<CR>
#     " Or map each action separately
#     nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#     nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
#     nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
# '''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''

  " 水平に分割する
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split'  : ':rightbelow 8sp',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ }

  let g:quickrun_config.cpp = {
  \   'command': 'g++',
  \   'cmdopt': '-std=c++11'
  \ }

  " \r でquickfixを閉じて、保存してからquickrunを実行する。
  let g:quickrun_no_default_key_mappings = 1
  nnoremap \q :cclose<CR>:write<CR>:QuickRun -mode n<CR>
  xnoremap \q :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

  " quickrun.vim が実行していない場合には <C-c> を呼び出す
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>" 
  nnoremap <silent> <C-q> :QuickRun<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'
# on_ft = ['c', 'cpp']
# depends = ['deoplete.nvim']

# [[plugins]]
# repo = 'airblade/vim-rooter'
# hook_add =  '''
#   let g:rooter_patterns = ['compile_commands.json', 'compile_flags.txt', 'CMakeLists.txt', '.git/']
# '''

[[plugins]]
repo = "vim-scripts/DoxygenToolkit.vim"

[[plugins]]
repo = "kana/vim-operator-user"

[[plugins]]
repo = "rhysd/vim-clang-format"
hook_add = '''
  autocmd FileType c,cpp,objc ClangFormatAutoEnable
  " autocmd FileType c,cpp,objc map <buffer><Leader>f <Plug>(operator-clang-format)
   " autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>

'''


[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# status bar color settings 
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ],
      \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
      \ },
      \ }
'''

# lightline extension for ale
[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
'''

# syntax linter 
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    " シンボルカラムを表示したままにする
    let g:ale_sign_column_always = 1
    " 保存時に整形してくれる
    let g:ale_fix_on_save = 1
    " 補完してくれる
    let g:ale_completion_enabled = 1
    " エラー行に表示するマーク
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
    " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_linters = {
        \   'c' : ['clangd'],
        \   'cpp' : ['clangd'],
        \   'python' : ['flake8'],
    \}
'''

[[plugins]]
repo = 'taketwo/vim-ros'
hook_add = '''
  autocmd BufRead,BufNewFile *.launch setfiletype roslaunch.xml
'''

[[plugins]]
repo = 'wordijp/NeoDebug'

[[plugins]]
repo = 'google/yapf'
hook_add = '''
'''

[[plugins]]
repo = 'bennyyip/vim-yapf'
depends = ['google/yapf']
hook_add = '''
  " autocmd FileType python YapfAutoEnable
  autocmd FileType python setlocal equalprg=yapf
'''

[[plugins]]
repo = 'heavenshell/vim-pydocstring' 

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
 
###fzf.vim
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  " ファイル一覧を出すときにプレビュー表示
  command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  command! -bang -nargs=* Ag
        \ call fzf#vim#ag(<q-args>,
        \                 <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
        \                         : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%', '?'),
        \                 <bang>0)
  " nnoremap <Leader>f :Files<CR>
  " nnoremap <Leader>g :Ag<CR>
'''

[[plugins]]
repo = 'pbogut/fzf-mru.vim'
hook_add = '''
  " nnoremap <Leader>b :FZFMru<CR>
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'Yggdroot/LeaderF'
build = 'bash install.sh'

hook_add = '''
" let g:Lf_HideHelp = 1
let g:Lf_UseCache = 1
" let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
let g:Lf_ShowDevIcons = 0
" --- popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "", 'right': "", 'font': "" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'tkhren/vim-textobj-numeral'
depends = ['kana/vim-textobj-user']

[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
  let g:translator_target_lang = 'ja'
  let g:translator_default_engines = ['google']
'''

