snippet     cout 
abbr        cout
  std::cout << $1 << std::endl;
  
snippet     cin
abbr        cin
  std::cin >> $1;

snippet commpetition
abbr    commpetition

  #include <bits/stdc++.h>
  using namespace std;
  // clang-format off

  using LL = long long;
  #define COUT(x) cout << #x << " = " << (x) << " (L" << __LINE__ << ")" << endl

  #define REP(i,x) for(int i=0;i<(int)(x);i++)
  #define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)
  #define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)
  #define UNIQUE(v) v.erase( unique(v.begin(), v.end()), v.end() );
   
  template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
  os<<"["; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"]"; return os;
  }
  template<class T> ostream& operator<<(ostream &os, const set<T> &t) {
  os<<"{"; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"}"; return os;
  }
  template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}
  // clang-format on

  int main() {
    return 0;
  }

snippet param
abbr rosparam template
  ${1:nh}.param<${2:double}>("${3:param_name}", ${4:val}, ${5:default_val});

snippet pub
abbr ros topic publisher
  ${1:pub} = ${2:nh}.advertise<${3:type}>("${4:topic}", ${5:10});

snippet sub
abbr ROS Subscriber
  ros::Subscriber ${1:sub} = ${2:nh}.subscribe("${3:topic}", ${4:10}, ${5:callback});


snippet publisher_template
  #include "ros/ros.h"
  #include "std_msgs/String.h"

  #include <sstream>

  int main(int argc, char **argv) {
    ros::init(argc, argv, "talker");
    ros::NodeHandle n;
    ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
    ros::Rate loop_rate(10);

    int count = 0;
    while (ros::ok()) {
      std_msgs::String msg;
      std::stringstream ss;
      ss << "hello world " << count;
      msg.data = ss.str();
      ROS_INFO("%s", msg.data.c_str());

      chatter_pub.publish(msg);
      ros::spinOnce();
      loop_rate.sleep();
      ++count;
    }

    return 0;
  }


snippet     subscriber_template
abbr        subscriber_template
options     head
  #include "ros/ros.h"
  #include "std_msgs/String.h"

  void chatterCallback(const std_msgs::String::ConstPtr& msg) {
    ROS_INFO("I heard: [%s]", msg->data.c_str());
  }

  int main(int argc, char** argv) {
    ros::init(argc, argv, "listener");
    ros::NodeHandle n;

    ros::Subscriber sub = n.subscribe("chatter", 1000, chatterCallback);

    ros::spin();

    return 0;
  }


snippet tf_listener
abbr tf_listener_template
  tf2_ros::Buffer tfBuffer;
  tf2_ros::TransformListener tfListener(tfBuffer);

snippet tf_lookup
abbr look up tf frames
   try{
     transformStamped = tfBuffer.lookupTransform("${1:src_frame_id}", "${2:dst_frame_id}",
                              ros::Time(0));
   }
   catch (tf2::TransformException &ex) {
     ROS_WARN("%s",ex.what());
     ros::Duration(1.0).sleep();
     continue;
   }
